{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alerts.js","Components/About.js","Components/EventHandlerBinding1.js","Components/EventHandlerBinding2.js","Components/EventHandlerBinding3.js","App.js","reportWebVitals.js","index.js","logo.svg"],"names":["Navbar","props","counter_red","counter_blue","counter_green","react_default","a","createElement","className","concat","mode","react_router_dom","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","document","body","style","backgroundColor","toggleMode","htmlFor","placeholder","defaultProps","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","color","heading","rows","value","onChange","event","console","log","target","newText","toUpperCase","alert","split","length","Alerts","words","lower","toLowerCase","charAt","slice","cap","msg","About","toggleButton","toggleButtonChange","_useState3","_useState4","toggleStyle","toggleStyleChange","aria-labelledby","data-bs-parent","border","Component","EventHandlerBinding3","App","setmode","showAlert","setshowAlert","setAlert","message","setTimeout","react_router","path","element","TextForm_TextForm","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App","module","exports","p"],"mappings":"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","file":"static/js/main.4fb5c325.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n  let counter_red=0;\r\n  let counter_blue=0;\r\n  let counter_green=0;\r\n  const redBG=()=>{\r\n    counter_red++;\r\n    if(counter_red%2!==0)\r\n    {\r\n      document.body.style.backgroundColor='red';\r\n    }\r\n    else\r\n    document.body.style.backgroundColor='white';\r\n    };\r\n    const blueBG=()=>{\r\n    counter_blue++;\r\n    if(counter_blue%2!==0) \r\n    document.body.style.backgroundColor='blue';\r\n    else\r\n    document.body.style.backgroundColor='white';\r\n    \r\n  }\r\n  const greenBG=()=>{\r\n    counter_green++;\r\n    if(counter_green%2!==0)\r\n    document.body.style.backgroundColor='green';\r\n    else\r\n    document.body.style.backgroundColor='white';\r\n  }\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to='/'>{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to='/'>Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to='/about'>About</Link>\r\n            </li>\r\n          </ul>\r\n          <span className=\"badge rounded-pill text-bg-danger my-1 mx-1\" role='button' onClick={redBG}>Red BG</span>\r\n          <span className=\"badge rounded-pill text-bg-primary my-1 mx-1\" role='button' onClick={blueBG}>Blue BG</span>\r\n          <span className=\"badge rounded-pill text-bg-success my-1 mx-1\" role='button' onClick={greenBG}>Green BG</span>\r\n            <div className={`form-check form-switch text-${props.mode=='light'?'grey':'white'} mx-2`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {                      //This is used to keep check on the type of props entered and display error on console.\r\n  title: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {                 //This is used when no props is passed and we want to display the default props.\r\n  title: 'Enter Title Here'\r\n}","import React, { useState } from 'react'\r\nimport '../TextForm.css';\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.alert(\"Converted to Upper Case!\",\"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log('On Change');\r\n        setText(event.target.value);\r\n    }\r\n    const clearEverything = () => {\r\n        setText('');\r\n        props.alert(\"Everything Erased!\",\"success\");\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className='container' style={{ color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className='mb-3'>\r\n                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" style={{ backgroundColor: props.mode === 'dark' ? '#51585f' : 'white', \r\n                    color: props.mode === 'dark' ? 'white' : 'black' }} rows=\"8\" placeholder='Enter the text' value={text} onChange={handleOnChange}></textarea>\r\n                    <button className=\"btn btn-primary my-2\" onClick={handleUpClick}>Convert to Upper Case</button>\r\n                    <button className=\"btn btn-danger mx-2\" onClick={clearEverything}>Clear</button>\r\n                </div>\r\n            </div>\r\n            <div className='container my-3' style={{ color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n                <h1>Text Summary:</h1>\r\n                <p>Number of words are: {text.split(\" \").length}  {/*This store all the individual word in an array and return the number of element in array.*/}\r\n                    <br />\r\n                    Number of characters are: {text.length}        {/*This gives length of all character in individual words */}\r\n                </p><br /><br /><br />\r\n                <h2>Preview:</h2>   \r\n                <div className='preview_page'>{text}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alerts(props) {\r\n    const cap=(words)=>{\r\n        let lower=words.toLowerCase();\r\n        return(lower.charAt(0).toUpperCase()+lower.slice(1));\r\n    }\r\n  return (\r\n    props.alert && <div className=\"alert alert-primary\" role=\"alert\">\r\n    <strong>{cap(props.alert.type)}</strong>: {props.alert.msg}\r\n  </div>\r\n  )\r\n}\r\n","import React,{useState} from 'react'\r\nexport default function About() {\r\n    const [toggleButton,toggleButtonChange]=useState('Toggle Dark Mode');\r\n    const [toggleStyle,toggleStyleChange]=useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n    const toggleMode=()=>{\r\n        if(toggleStyle.color==='black')\r\n        {\r\n            toggleStyleChange({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            })\r\n            toggleButtonChange('Toggle Light Mode');\r\n        }\r\n        else\r\n        {\r\n            toggleStyleChange({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n            })\r\n            toggleButtonChange('Toggle Dark Mode');\r\n        }\r\n    }\r\n  return (\r\n        <div className=\"container\" style={toggleStyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\" style={toggleStyle}>\r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" type=\"button\" style={toggleStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n            Accordion Item #1\r\n            </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={toggleStyle} >\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" style={toggleStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n            Accordion Item #2\r\n            </button>\r\n        </h2>\r\n        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={toggleStyle}>\r\n            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={toggleStyle}>\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" style={toggleStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n            Accordion Item #3\r\n            </button>\r\n        </h2>\r\n        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={toggleStyle}>\r\n            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <div className='container my-3'>\r\n            <button className=\"btn btn-primary\" onClick={toggleMode}>{toggleButton}</button>\r\n        </div>\r\n        </div>\r\n        </div>\r\n  )\r\n}\r\n","import { render } from '@testing-library/react'\r\nimport React,{Component} from 'react'   \r\nclass EventHandlerBinding1 extends Component{\r\n    constructor()\r\n    {\r\n        super()\r\n        this.state={\r\n            message: 'This is Me'\r\n        }\r\n    }\r\n    toggleChange=()=>{\r\n        this.setState({\r\n            message: 'I am Priyanshu'\r\n    })\r\n    }\r\nrender(){\r\n    \r\n    return(\r\n    <div>\r\n        <h1>{this.state.message}</h1>\r\n        <button onClick={()=>this.toggleChange()}>Click Me</button>\r\n    </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default EventHandlerBinding1","import React, { Component } from 'react'\r\n\r\n class EventHandlerBinding2 extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            message: \"Hello There!\"\r\n        }\r\n        this.toggleChange=this.toggleChange.bind(this);\r\n    }\r\n    toggleChange=()=>{\r\n        this.setState({\r\n            message: \"Myself Priyanshu\"\r\n        })\r\n    };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.state.message}</h1>\r\n        <button onClick={this.toggleChange}>Click 2</button> {/*This approach is better than EventHandlerBinding1 */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EventHandlerBinding2","import React,{useState} from 'react'\r\n\r\nfunction EventHandlerBinding3() {\r\n    const [change, setchange] = useState('Are you there?')\r\n    const toggleChange=()=>{\r\n        setchange(\r\n            'I had arrived here.'\r\n        )\r\n    }\r\n  return (\r\n    <div>\r\n        <h1>{change}</h1>\r\n        <button onClick={toggleChange}>Click to toggle</button>     {/* This is best approach in function based react i.e using state */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EventHandlerBinding3","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React,{ useState } from 'react';\nimport Alerts from './Components/Alerts';\nimport About from './Components/About';\nimport EventHandlerBinding1 from './Components/EventHandlerBinding1'\nimport EventHandlerBinding2 from './Components/EventHandlerBinding2'\nimport EventHandlerBinding3 from './Components/EventHandlerBinding3';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport ListRendering from './Components/ListRendering';\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [showAlert, setshowAlert] = useState(null);\n  const setAlert=(message,type)=>{\n    setshowAlert({\n      msg:message,\n      type: type\n    })\n    setTimeout(() => {\n      setshowAlert(null);\n    }, 1500);\n  }\n  const toggleMode=()=>{\n    if(mode==='light')\n    {\n      setmode('dark');\n      document.body.style.backgroundColor='#51585f';\n      setAlert(\"Dark mode is set!\",\"success\");\n    }\n    else\n    {\n      setmode('light');\n      document.body.style.backgroundColor='white';\n      setAlert(\"Light mode is set!\",\"success\");\n    }\n  }\n  return (\n    <Router>\n    <Navbar title=\"MyReact\"  mode={mode} toggleMode={toggleMode} />\n    <Alerts alert={showAlert}/>\n    <div className=\"container\">\n           {/* <EventHandlerBinding1/>\n           <EventHandlerBinding2/>\n           <EventHandlerBinding3/> */}\n           {/* <ListRendering/> */}\n    <Routes>\n          <Route path=\"about\" element={<About />}/>\n          <Route path=\"/\" element={<TextForm heading=\"Enter the text below to Analyze: \" mode={mode} alert={setAlert} />}/>\n    </Routes> \n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";"],"sourceRoot":""}